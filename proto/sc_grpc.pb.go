

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: proto/sc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchedulerController_KeepAlive_FullMethodName                  = "/scheduler_controller.SchedulerController/KeepAlive"
	SchedulerController_InputWorkflow_FullMethodName              = "/scheduler_controller.SchedulerController/InputWorkflow"
	SchedulerController_FetchWorkflowIDList_FullMethodName        = "/scheduler_controller.SchedulerController/FetchWorkflowIDList"
	SchedulerController_GetWorkflowByID_FullMethodName            = "/scheduler_controller.SchedulerController/GetWorkflowByID"
	SchedulerController_RegisterResourceAllocator_FullMethodName  = "/scheduler_controller.SchedulerController/RegisterResourceAllocator"
	SchedulerController_GetWorkflowPhaseByCustomID_FullMethodName = "/scheduler_controller.SchedulerController/GetWorkflowPhaseByCustomID"
	SchedulerController_DeleteWorkflow_FullMethodName             = "/scheduler_controller.SchedulerController/DeleteWorkflow"
)

// SchedulerControllerClient is the client API for SchedulerController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerControllerClient interface {
	// 调度器内保活器向调度器控制器发送保活信号
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveReply, error)
	// 前端输入工作流
	InputWorkflow(ctx context.Context, in *InputWorkflowRequest, opts ...grpc.CallOption) (*InputWorkflowReply, error)
	// 导出工作流ID
	FetchWorkflowIDList(ctx context.Context, in *WorkflowIDListRequest, opts ...grpc.CallOption) (*WorkflowIDListReply, error)
	// 选择某一个工作流查看DAG
	GetWorkflowByID(ctx context.Context, in *GetWorkflowByIdRequest, opts ...grpc.CallOption) (*GetWorkflowByIdReply, error)
	// 注册资源分配器
	RegisterResourceAllocator(ctx context.Context, in *RegisterRARequest, opts ...grpc.CallOption) (*RegisterRAReply, error)
	// 获取工作流当前状态
	GetWorkflowPhaseByCustomID(ctx context.Context, in *GetWorkflowPhaseByCustomIDRequest, opts ...grpc.CallOption) (*GetWorkflowPhaseByCustomIDReply, error)
	// 删除工作流
	DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*DeleteWorkflowReply, error)
}

type schedulerControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerControllerClient(cc grpc.ClientConnInterface) SchedulerControllerClient {
	return &schedulerControllerClient{cc}
}

func (c *schedulerControllerClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveReply, error) {
	out := new(KeepAliveReply)
	err := c.cc.Invoke(ctx, SchedulerController_KeepAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) InputWorkflow(ctx context.Context, in *InputWorkflowRequest, opts ...grpc.CallOption) (*InputWorkflowReply, error) {
	out := new(InputWorkflowReply)
	err := c.cc.Invoke(ctx, SchedulerController_InputWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) FetchWorkflowIDList(ctx context.Context, in *WorkflowIDListRequest, opts ...grpc.CallOption) (*WorkflowIDListReply, error) {
	out := new(WorkflowIDListReply)
	err := c.cc.Invoke(ctx, SchedulerController_FetchWorkflowIDList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) GetWorkflowByID(ctx context.Context, in *GetWorkflowByIdRequest, opts ...grpc.CallOption) (*GetWorkflowByIdReply, error) {
	out := new(GetWorkflowByIdReply)
	err := c.cc.Invoke(ctx, SchedulerController_GetWorkflowByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) RegisterResourceAllocator(ctx context.Context, in *RegisterRARequest, opts ...grpc.CallOption) (*RegisterRAReply, error) {
	out := new(RegisterRAReply)
	err := c.cc.Invoke(ctx, SchedulerController_RegisterResourceAllocator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) GetWorkflowPhaseByCustomID(ctx context.Context, in *GetWorkflowPhaseByCustomIDRequest, opts ...grpc.CallOption) (*GetWorkflowPhaseByCustomIDReply, error) {
	out := new(GetWorkflowPhaseByCustomIDReply)
	err := c.cc.Invoke(ctx, SchedulerController_GetWorkflowPhaseByCustomID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerControllerClient) DeleteWorkflow(ctx context.Context, in *DeleteWorkflowRequest, opts ...grpc.CallOption) (*DeleteWorkflowReply, error) {
	out := new(DeleteWorkflowReply)
	err := c.cc.Invoke(ctx, SchedulerController_DeleteWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerControllerServer is the server API for SchedulerController service.
// All implementations must embed UnimplementedSchedulerControllerServer
// for forward compatibility
type SchedulerControllerServer interface {
	// 调度器内保活器向调度器控制器发送保活信号
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveReply, error)
	// 前端输入工作流
	InputWorkflow(context.Context, *InputWorkflowRequest) (*InputWorkflowReply, error)
	// 导出工作流ID
	FetchWorkflowIDList(context.Context, *WorkflowIDListRequest) (*WorkflowIDListReply, error)
	// 选择某一个工作流查看DAG
	GetWorkflowByID(context.Context, *GetWorkflowByIdRequest) (*GetWorkflowByIdReply, error)
	// 注册资源分配器
	RegisterResourceAllocator(context.Context, *RegisterRARequest) (*RegisterRAReply, error)
	// 获取工作流当前状态
	GetWorkflowPhaseByCustomID(context.Context, *GetWorkflowPhaseByCustomIDRequest) (*GetWorkflowPhaseByCustomIDReply, error)
	// 删除工作流
	DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*DeleteWorkflowReply, error)
	mustEmbedUnimplementedSchedulerControllerServer()
}

// UnimplementedSchedulerControllerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerControllerServer struct {
}

func (UnimplementedSchedulerControllerServer) KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedSchedulerControllerServer) InputWorkflow(context.Context, *InputWorkflowRequest) (*InputWorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputWorkflow not implemented")
}
func (UnimplementedSchedulerControllerServer) FetchWorkflowIDList(context.Context, *WorkflowIDListRequest) (*WorkflowIDListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchWorkflowIDList not implemented")
}
func (UnimplementedSchedulerControllerServer) GetWorkflowByID(context.Context, *GetWorkflowByIdRequest) (*GetWorkflowByIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowByID not implemented")
}
func (UnimplementedSchedulerControllerServer) RegisterResourceAllocator(context.Context, *RegisterRARequest) (*RegisterRAReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterResourceAllocator not implemented")
}
func (UnimplementedSchedulerControllerServer) GetWorkflowPhaseByCustomID(context.Context, *GetWorkflowPhaseByCustomIDRequest) (*GetWorkflowPhaseByCustomIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowPhaseByCustomID not implemented")
}
func (UnimplementedSchedulerControllerServer) DeleteWorkflow(context.Context, *DeleteWorkflowRequest) (*DeleteWorkflowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedSchedulerControllerServer) mustEmbedUnimplementedSchedulerControllerServer() {}

// UnsafeSchedulerControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerControllerServer will
// result in compilation errors.
type UnsafeSchedulerControllerServer interface {
	mustEmbedUnimplementedSchedulerControllerServer()
}

func RegisterSchedulerControllerServer(s grpc.ServiceRegistrar, srv SchedulerControllerServer) {
	s.RegisterService(&SchedulerController_ServiceDesc, srv)
}

func _SchedulerController_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerController_KeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_InputWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).InputWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerController_InputWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).InputWorkflow(ctx, req.(*InputWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_FetchWorkflowIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).FetchWorkflowIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerController_FetchWorkflowIDList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).FetchWorkflowIDList(ctx, req.(*WorkflowIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_GetWorkflowByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).GetWorkflowByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerController_GetWorkflowByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).GetWorkflowByID(ctx, req.(*GetWorkflowByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_RegisterResourceAllocator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).RegisterResourceAllocator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerController_RegisterResourceAllocator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).RegisterResourceAllocator(ctx, req.(*RegisterRARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_GetWorkflowPhaseByCustomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowPhaseByCustomIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).GetWorkflowPhaseByCustomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerController_GetWorkflowPhaseByCustomID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).GetWorkflowPhaseByCustomID(ctx, req.(*GetWorkflowPhaseByCustomIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerController_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerControllerServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerController_DeleteWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerControllerServer).DeleteWorkflow(ctx, req.(*DeleteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulerController_ServiceDesc is the grpc.ServiceDesc for SchedulerController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler_controller.SchedulerController",
	HandlerType: (*SchedulerControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAlive",
			Handler:    _SchedulerController_KeepAlive_Handler,
		},
		{
			MethodName: "InputWorkflow",
			Handler:    _SchedulerController_InputWorkflow_Handler,
		},
		{
			MethodName: "FetchWorkflowIDList",
			Handler:    _SchedulerController_FetchWorkflowIDList_Handler,
		},
		{
			MethodName: "GetWorkflowByID",
			Handler:    _SchedulerController_GetWorkflowByID_Handler,
		},
		{
			MethodName: "RegisterResourceAllocator",
			Handler:    _SchedulerController_RegisterResourceAllocator_Handler,
		},
		{
			MethodName: "GetWorkflowPhaseByCustomID",
			Handler:    _SchedulerController_GetWorkflowPhaseByCustomID_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _SchedulerController_DeleteWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sc.proto",
}
